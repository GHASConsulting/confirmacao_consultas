services:
  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Botconversa API
      BOTCONVERSA_API_KEY: ${BOTCONVERSA_API_KEY}
      BOTCONVERSA_API_URL: ${BOTCONVERSA_API_URL}
      BOTCONVERSA_WEBHOOK_SECRET: ${BOTCONVERSA_WEBHOOK_SECRET}

      # Database Configuration
      DATABASE_TYPE: ${DATABASE_TYPE}
      DATABASE_URL: ${DATABASE_URL}
      ORACLE_URL: ${ORACLE_URL}
      POSTGRESQL_URL: ${POSTGRESQL_URL}
      FIREBIRD_URL: ${FIREBIRD_URL}

      # Application Configuration
      DEBUG: ${DEBUG}
      LOG_LEVEL: ${LOG_LEVEL}
      MAX_WORKERS: ${MAX_WORKERS}
      WORKER_TIMEOUT: ${WORKER_TIMEOUT}

      # Hospital Information
      HOSPITAL_NAME: ${HOSPITAL_NAME}
      HOSPITAL_PHONE: ${HOSPITAL_PHONE}
      HOSPITAL_ADDRESS: ${HOSPITAL_ADDRESS}
      HOSPITAL_CITY: ${HOSPITAL_CITY}
      HOSPITAL_STATE: ${HOSPITAL_STATE}

      # Scheduler Configuration
      SCHEDULER_CONFIRMATION_HOUR: ${SCHEDULER_CONFIRMATION_HOUR}
      SCHEDULER_CONFIRMATION_MINUTE: ${SCHEDULER_CONFIRMATION_MINUTE}
      SCHEDULER_REMINDER_HOUR: ${SCHEDULER_REMINDER_HOUR}
      SCHEDULER_REMINDER_MINUTE: ${SCHEDULER_REMINDER_MINUTE}
      SCHEDULER_ENABLE_CONFIRMATION_JOB: ${SCHEDULER_ENABLE_CONFIRMATION_JOB}
      SCHEDULER_ENABLE_REMINDER_JOB: ${SCHEDULER_ENABLE_REMINDER_JOB}

      # Webhook Configuration
      WEBHOOK_HOST: ${WEBHOOK_HOST}
      WEBHOOK_PORT: ${WEBHOOK_PORT}
      WEBHOOK_URL: ${WEBHOOK_URL}

    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
        - CMD
        - curl
        - -f
        - http://localhost:5001/health
      timeout: 10s

    ports:
      - published: ${APP_PORT:-5001}
        target: 5001

    restart: unless-stopped

    volumes:
      - ./logs:/app/logs:rw

  # Banco Oracle (opcional - para desenvolvimento local)
  db-oracle:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    environment:
      - ORACLE_PWD=${ORACLE_DOCKER_PASSWORD:-oracle}
      - ORACLE_CHARACTERSET=AL32UTF8
    volumes:
      - oracle_data:/opt/oracle/oradata
      - ./init-oracle.sql:/opt/oracle/scripts/startup/init-oracle.sql
    ports:
      - "${ORACLE_DOCKER_PORT:-1521}:1521"
    restart: unless-stopped
    profiles:
      - oracle
    healthcheck:
      test: [ "CMD", "sqlplus", "-L", "${ORACLE_DOCKER_USER:-system}/${ORACLE_DOCKER_PASSWORD:-oracle}@//localhost:${ORACLE_DOCKER_PORT:-1521}/${ORACLE_DOCKER_SERVICE:-XE}", "-c", "SELECT 1 FROM DUAL" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Banco PostgreSQL (opcional - para desenvolvimento local)
  db-postgresql:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRESQL_DOCKER_DB:-confirmacao_consultas}
      - POSTGRES_USER=${POSTGRESQL_DOCKER_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRESQL_DOCKER_PASSWORD:-1234}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-postgresql.sql:/docker-entrypoint-initdb.d/init-postgresql.sql
    ports:
      - "${POSTGRESQL_DOCKER_PORT:-5432}:5432"
    restart: unless-stopped
    profiles:
      - postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRESQL_DOCKER_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Banco Firebird (opcional - para desenvolvimento local)
  db-firebird:
    image: jacobalberty/firebird:3.0
    environment:
      - FIREBIRD_DATABASE=${FIREBIRD_DOCKER_DB:-hospital_db}
      - FIREBIRD_USER=${FIREBIRD_DOCKER_USER:-SYSDBA}
      - FIREBIRD_PASSWORD=${FIREBIRD_DOCKER_PASSWORD:-masterkey}
    volumes:
      - firebird_data:/firebird/data
      - ./init-firebird.sql:/docker-entrypoint-initdb.d/init-firebird.sql
    ports:
      - "${FIREBIRD_DOCKER_PORT:-3050}:3050"
    restart: unless-stopped
    profiles:
      - firebird
    healthcheck:
      test: [ "CMD", "gds_db_info", "-user", "${FIREBIRD_DOCKER_USER:-SYSDBA}", "-password", "${FIREBIRD_DOCKER_PASSWORD:-masterkey}", "-database", "localhost:${FIREBIRD_DOCKER_PORT:-3050}/${FIREBIRD_DOCKER_DB:-hospital_db}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx (opcional - para produção)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    profiles:
      - production
    restart: unless-stopped

volumes:
  oracle_data:
  postgresql_data:
  firebird_data:
